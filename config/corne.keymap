/*
 * Alan's Corne ZMK config
 * 
 * Originally created for QMK by Mark Stosberg (@markstos)
 * Adapted for ZMK by Micha≈Ç Minarowski (@n3oney)
 * 
 * SPDX-License-Identifier: GPL-2.0-or-later
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC       &kp Q              &kp W              &kp E                  &kp R                &kp T        &kp Y      &kp U                 &kp I                       &kp O                   &kp P                  &kp DELETE
&kp CAPSLOCK  &kp A              &kp S              &kp D                  &kp F                &kp G        &kp H      &kp J                 &kp K                       &kp L                   &kp SEMI               &kp APOSTROPHE
&trans        &hrm_l LEFT_GUI Z  &hrm_l LEFT_ALT X  &hrm_l LEFT_CONTROL C  &hrm_l LEFT_SHIFT V  &kp B        &kp N      &hrm_r RIGHT_SHIFT M  &hrm_r RIGHT_CONTROL COMMA  &hrm_r LEFT_ALT PERIOD  &hrm_r RIGHT_GUI FSLH  &trans
                                                    &mo 2                  &kp SPACE            &lt 3 TAB    &lt 4 RET  &kp BACKSPACE         &mo 1
            >;
        };

        num_layer {
            bindings = <
&trans  &kp SLASH  &kp N7  &kp N8  &kp N9  &kp ASTERISK    &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp MINUS  &kp N4  &kp N5  &kp N6  &kp PLUS        &trans  &trans     &trans     &trans    &trans    &trans
&trans  &trans     &kp N1  &kp N2  &kp N3  &kp DOT         &trans  &kp RSHFT  &kp RCTRL  &kp LALT  &kp RGUI  &trans
                           &kp N0  &trans  &trans          &trans  &trans     &trans
            >;
        };

        sym_layer {
            bindings = <
&kp TILDE  &kp AT_SIGN      &kp LESS_THAN  &kp GREATER_THAN  &kp DOLLAR     &kp HASH       &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp COLON       &kp DOUBLE_QUOTES  &trans
&trans     &kp EXCLAMATION  &kp MINUS      &kp PLUS          &kp EQUAL      &kp CARET      &kp PIPE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION    &kp SEMICOLON      &trans
&trans     &trans           &kp SLASH      &kp ASTERISK      &kp BACKSLASH  &kp PERCENT    &kp TILDE      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp UNDERSCORE  &trans             &trans
                                           &trans            &trans         &trans         &trans         &trans                &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &kp K_UNDO  &kp K_CUT  &kp K_COPY   &kp K_PASTE  &kp K_REDO  &trans
&trans  &trans    &trans    &trans     &trans     &trans    &trans      &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT   &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &trans      &kp HOME   &kp PAGE_UP  &kp PAGE_UP  &kp END     &trans
                            &trans     &trans     &trans    &trans      &trans     &trans
            >;
        };

        media_layer {
            bindings = <
&trans          &trans          &trans             &trans           &trans            &trans    &trans  &trans     &trans     &trans    &trans    &trans
&bt BT_CLR_ALL  &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT        &trans    &trans  &trans     &trans     &trans    &trans    &trans
&bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3      &trans    &trans  &kp RSHFT  &kp RCTRL  &kp LALT  &kp RGUI  &trans
                                                   &kp C_MUTE       &kp C_PLAY_PAUSE  &trans    &trans  &trans     &trans
            >;
        };

        fn_layer {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5           &kp F6    &kp F7  &kp F8           &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &kp PRINTSCREEN  &trans    &trans  &kp PAUSE_BREAK  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans           &trans    &trans  &trans           &trans  &trans   &trans   &trans
                        &trans  &trans           &trans    &trans  &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        function_layer {
            if-layers = <2 2>;
            then-layer = <5>;
        };
    };
};
