/*
 * Alan's Corne ZMK config
 * 
 * Originally created for QMK by Mark Stosberg (@markstos)
 * Adapted for ZMK by Micha≈Ç Minarowski (@n3oney)
 * 
 * SPDX-License-Identifier: GPL-2.0-or-later
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC      &kp Q          &kp W          &kp F           &kp P            &kp B        &kp J      &kp L            &kp U           &kp Y          &kp SQT        &kp DELETE
&caps_word   &hrm_l LGUI A  &hrm_l LALT R  &hrm_l LCTRL S  &hrm_l LSHIFT T  &kp G        &kp M      &hrm_r RSHIFT N  &hrm_r RCTRL E  &hrm_r LALT I  &hrm_r RGUI O  &kp SEMI
&key_repeat  &kp Z          &kp X          &kp C           &kp D            &kp V        &kp K      &kp H            &kp COMMA       &kp DOT        &kp FSLH       &none
                                           &mo 3           &kp SPACE        &lt 1 TAB    &lt 4 RET  &kp BACKSPACE    &mo 2
            >;
        };

        num_layer {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp FSLH      &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &kp MINUS  &kp N4  &kp N5  &kp N6  &kp ASTERISK  &trans
&trans  &trans    &trans    &trans     &trans     &trans    &kp PLUS   &kp N1  &kp N2  &kp N3  &kp DOT       &trans
                            &trans     &trans     &trans    &trans     &trans  &kp N0
            >;
        };

        sym_layer {
            bindings = <
&trans         &kp GRAVE                &kp LESS_THAN         &kp GREATER_THAN    &kp MINUS            &kp PIPE         &kp CARET    &kp LEFT_BRACKET                &kp RIGHT_BRACKET               &kp DOLLAR         &kp SQT                    &trans
&kp BACKSLASH  &hrm_l LGUI EXCLAMATION  &hrm_l LALT ASTERISK  &hrm_l LCTRL SLASH  &hrm_l LSHIFT EQUAL  &kp AMPERSAND    &kp HASH     &hrm_r RSHIFT LEFT_PARENTHESIS  &hrm_r RCTRL RIGHT_PARENTHESIS  &hrm_r LALT COLON  &hrm_r RGUI DOUBLE_QUOTES  &kp SEMICOLON
&trans         &kp TILDE                &kp PLUS              &kp LEFT_BRACE      &kp RIGHT_BRACE      &kp PERCENT      &kp AT_SIGN  &kp UNDERSCORE                  &kp COMMA                       &kp DOT            &kp QUESTION               &trans
                                                              &trans              &trans               &trans           &trans       &trans                          &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_REDO  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &kp LEFT    &kp DOWN   &kp UP      &kp RIGHT    &trans      &trans
&trans  &trans    &trans    &trans     &trans     &trans    &kp HOME    &kp PG_DN  &kp PG_UP   &kp END      &trans      &trans
                            &trans     &trans     &trans    &trans      &trans     &trans
            >;
        };

        misc_layer {
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6            &kp F7      &kp F8             &kp F9            &kp F10     &kp F11  &kp F12
&trans      &trans        &trans        &trans        &trans        &trans            &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_NEXT  &trans   &none
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR_ALL    &trans      &kp K_MUTE         &kp C_PLAY_PAUSE  &trans      &trans   &to 5
                                        &trans        &trans        &trans            &trans      &trans             &trans
            >;
        };

        game_layer {
            bindings = <
&kp MINUS  &kp Q  &kp W  &kp E      &kp R      &kp T       &kp Y    &kp U     &kp I      &kp O    &kp P     &kp ESC
&kp EQUAL  &kp A  &kp S  &kp D      &kp F      &kp G       &kp H    &kp J     &kp K      &kp L    &kp SEMI  &kp GRAVE
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V      &kp B       &kp N    &kp M     &kp COMMA  &kp DOT  &kp FSLH  &to 0
                         &kp LCTRL  &kp SPACE  &kp RBKT    &kp RET  &kp BSPC  &kp TAB
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
